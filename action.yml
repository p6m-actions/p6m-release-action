name: "P6m Release Action"
description: "Bumps versions and tag a commit"
author: "Ali Samji <ali@ybor.ai>"

# Define the inputs for this action
inputs:
  language:
    description: The language that app is written in.
    required: true
  enable_helm:
    description: A value indicating whether there is helm chart in the repo.
    default: 'false'
  helm_chart:
    description: The path to the helm chart. This should be the directory that contains Chart.yaml

# Define the outputs for this action
outputs:
  appVersion:
    description: The version of the app after the bump.
    value: ${{ steps.app.outputs.version }}
  helmVersion:
    description: The version of the helm chart after the bump. Empty if helm is disabled.
    value: ${{ steps.helm.outputs.version }}

# Define the runs configuration
runs:
  using: "composite"
  steps:
    - name: Get P6M YBOR Token
      shell: bash
      run: |
        ACTIONS_TOKEN=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value')
        echo "GH_TOKEN=$(curl \
            -H "x-github-token: $GITHUB_TOKEN" \
            -H "x-actions-token: $ACTIONS_TOKEN" \
            -H "x-installation-id: $PLATFORM_INSTALLATION_ID"
            $PLATFORM_TOKEN_EXCHANGE_URL | jq -r '.GITHUB_TOKEN')" >> $GITHUB_ENV

    - name: Version Bump
      shell: bash
      id: app
      run: |
        case '${{ inputs.language }}' in
          'rust') ${{ github.actions_path }}/bump_rust_version.sh patch ;;
          *)
            echo '${{ inputs.language }} is not supported.'
            exit 1
            ;;
        esac

    - name: Version Bump (Helm)
      if: inputs.enable_helm == 'true'
      shell: bash
      id: helm
      run: |
        pipx install pybump
        pybump set --file ${{ inputs.helm_chart }}/Chart.yaml --app-version --set-version ${{ steps.app.outputs.version }}
        pybump bump --file ${{ inputs.helm_chart }}/Chart.yaml --level patch
        echo "version=$(pybump get --file ${{ inputs.helm_chart }}/Chart.yaml)" >> $GITHUB_OUTPUT
        echo 'files_changed=["${{ inputs.helm_chart }}/Chart.yaml"]' >> $GITHUB_OUTPUT

# Define the branding for the action in the GitHub Marketplace
branding:
  icon: "award"
  color: "blue"
